import pygame
import random


pygame.init()


screen = pygame.display.set_mode([400,500])
pygame.display.set_caption('2048')

fps = 60

font = pygame.font.Font('freesansbold.ttf',24)


timer = pygame.time.Clock()


board_values = [[0 for _ in range(4)]for _ in range(4)]

#variables
initalcount = 0
spawn = True
gameover = False
direction = ""
score = 0

#for highscore
file = open('highscores.txt', 'r')
inthigh = int(file.readline())
highscore = inthigh


def draws():
    pygame.draw.rect(screen , 'black', [50,50,300,100],0,10)
    over = font.render(f"Game Over!", True, 'white')
    over2 = font.render(f"Press Enter to restart", True, 'white')
    screen.blit(over, (130, 65))
    screen.blit(over2, (70, 105))

colors = {0: (204,192,179),
          2: (238,228,218),
          4: (237,224,200),
          8: (242,177,121),
          16:(245,149,99),
          32:(246,124,95),
          64:(246,94,59),
          128:(237,207,114),
          256:(237,204,97),
          512:(237,200,80),
          1024:(237,197,63),
          2048: (237,194,46),
          'light text': (249,246,242),
          'dark text': (119,110,101),
          'other': (0,0,0),
          'bg': (187,173,160)}



def game_board():
    pygame.draw.rect(screen,colors['bg'],[0,0,400,400],0,10)
    score_text = font.render(f'Score: {score}', True, 'black')
    highscore_text = font.render(f'Score: {highscore}', True, 'black')
    screen.blit(score_text, (10,410))
    screen.blit(highscore_text, (10,450))
    pass
    


def game_pieces(board):
    for i in range(4):
        for j in range(4):
            value = board[i][j]

            if value > 8:
                value_color = colors['light text']
            else:
                value_color = colors['dark text']
            
            
            if value <= 2048:
                color = colors[value]
            
            else:
                color = colors['other']

            
            pygame.draw.rect(screen,color,[j*95 + 20, i*95 + 20 ,75,75],0,5)
            if value > 0 :
                lenght = len(str(value))
                font = pygame.font.Font('freesansbold.ttf', 48 - (5*lenght))
                value_text = font.render(str(value),True,value_color)
                text_rect = value_text.get_rect(center = (j*95 + 57, i* 95 +57))
                screen.blit(value_text,text_rect)
                
                pygame.draw.rect(screen,color,[j*95 + 20, i*95 + 20 ,75,75],2,5)
                
                


def new_pieces(board):
    full =  False
    count = 0
    while any (0 in row for row in board) and count < 1 :
        row = random.randint(0,3)
        column = random.randint(0,3)

        if board[row][column] == 0:
            count += 1
            if random.randint(1,10) == 4:
                board[row][column] = 4

            else:
                board[row][column] = 2

        if count < 1:
            full = True

    return board, full
    

def take_turn(direc, board):
    merge = [[False for _ in range(4)] for _ in range(4)]
    global score
    if direc == 'UP':
        for i in range(4):
            for j in range(4):
                shift = 0
                if i > 0:
                    for q in range(i):
                        if board[q][j] == 0:
                            shift += 1

                    if shift > 0:
                        board[i-shift][j] = board[i][j]
                        board[i][j] = 0

                    if board[i-shift-1][j] == board[i-shift][j] and not merge[i-shift][j] and not merge[i-shift-1][j]:
                        board[i-shift-1][j] *= 2
                        board[i-shift][j] = 0
                        merge[i-shift-1][j] = True
                        score += board[i-shift-1][j]


    elif direc == 'DOWN':
        for i in range(3):
            for j in range(4):
                shift = 0
                for q in range(i+1):
                    if board[3-q][j] == 0:
                        shift += 1

                if shift > 0:
                    board[2-i+shift][j] = board[2-i][j]
                    board[2-i][j]= 0

                if 3-i+shift <= 3:
                    if board[2-i+shift][j] == board[3-i+shift][j] and not merge[3-i+shift][j] and not merge[2-i+shift][j]:
                        board[3-i+shift][j] *= 2
                        board[2-i+shift][j] = 0
                        merge[3-i+shift][j] = True
                        score += merge[3-i+shift][j]

    elif direc == 'LEFT':
        for i in range(4):
            for j in range(4):
                shift = 0
                for q in range(j):
                    if board[i][q] == 0:
                        shift += 1

                if shift > 0:
                    board[i][j-shift] = board[i][j]
                    board[i][j] = 0

                if board[i][j-shift-1] == board[i][j-shift] and not merge[i][j-shift-1] and not merge[i][j-shift]:
                    board[i][j-shift-1] *= 2
                    board[i][j-shift] = 0
                    merge[i][j-shift-1] = True
                    score += merge[i][j-shift-1]

    
    elif direc == 'RIGHT':
        for i in range(4):
            for j in range(4):
                shift = 0
                for q in range(j):
                    if board[i][3-q] == 0:
                        shift += 1

                
                if shift > 0:
                    board[i][3-j+shift] = board[i][3-j]
                    board[i][3-j] = 0
                if 4-j+shift <= 3:
                    if board[i][4-j+shift] == board[i][3-j+shift] and not merge[i][4-j+shift] and not merge[i][3-j+shift]:
                        board[i][4-j+shift] *= 2   
                        board[i][3-j+shift] = 0   
                        merge[i][4-j+shift] = True  
                        score += merge[i][4-j+shift]



    

    return board







#to run
run = True
while run:

    timer.tick(fps)
    screen.fill('gray')
    game_board()

    game_pieces(board_values)

    if spawn or initalcount < 2:
        board_values,gameover = new_pieces(board_values)
        spawn = False
        initalcount += 1
    
    if direction != "":
        board_values = take_turn(direction,board_values)
        direction = ""
        spawn = True

    if gameover:
        draws()
        if highscore > inthigh:
            file = open('highscores.txt', 'w')
            file.write(f"{highscore}")
            file.close()
            inthigh = highscore
        

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_UP:
                direction = 'UP'
            elif event.key == pygame.K_DOWN:
                direction = 'DOWN'
            elif event.key == pygame.K_LEFT:
                direction = 'LEFT'
            elif event.key == pygame.K_RIGHT:
                direction = 'RIGHT'
            
            if gameover:
                if event.key == pygame.K_RETURN:
                    board_values = [[0 for _ in range(4)] for _ in range(4)]
                    initalcount = 0
                    spawn = True
                    gameover = False
                    direction = ""
                    score = 0
        
            
    if score > highscore:
        highscore = score



    pygame.display.flip()


pygame.quit()


